// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5571.RobotFinal.subsystems;

import org.usfirst.frc5571.RobotFinal.Robot;
import org.usfirst.frc5571.RobotFinal.RobotMap;
import org.usfirst.frc5571.RobotFinal.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.lang.*;


/**
 *
 */
public class Elevator extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	CANTalon cANTalonElev = RobotMap.elevatorCANTalonElev;

	// Put methods for controlling this subsystem
	// here. Call these from CommandsS.
	double axis;
	static double MAX_ELEV_CURRENT = 100.0;  // limit current to 3A  motor is rated at 36.91W 
	static double DOWN_SPEED = -100;  // position change per 10 ms
	static double UP_SPEED = 200;  // position change per 10 ms
	double p;
	double i;;
	double d;
	double f;
	int izone;
	double ramprate;  // this should leave the ramp rate uncapped.
	int profile;
	boolean servoHereFlag = false;
	boolean	homed;
	double servoAtThisPosition;



	public void initCanPID() {

		// Set PID values for Velocity and Position Mode here in profile 0
		p = 1;
		i = 0;
		d = 0.0;
		f = 60;
		izone = 100;
		ramprate = 120;  // this should leave the ramp rate uncapped.
		profile = 0;
		cANTalonElev.setPID(p, i, d, f, izone, ramprate, profile);

		// Set PID values for Servo In Place Posisiotn Mode here in profile 1
		p = .6;
		i = .00015;
		d = 0.0065;
		f = 0.000;
		izone = 0;
		ramprate = 0;  // this should leave the ramp rate uncapped.
		profile = 1;
		cANTalonElev.setPID(p, i, d, f, izone, ramprate, profile);

		// Specify Quadrature Encoder
		cANTalonElev.setFeedbackDevice(CANTalon.FeedbackDevice.QuadEncoder);
		cANTalonElev.reverseSensor(false);
		//Reverse = true for gripper motor
		//Reverse = false for pulley
		homed = false;
		if (cANTalonElev.isRevLimitSwitchClosed()){
			zeroElevator();
			homed = true;
		}
	}

	public void limitSwitchInit() {
		cANTalonElev.enableBrakeMode(true);
		cANTalonElev.enableLimitSwitch(true, true);
	}

	// Change to closed loop control mode and hold the current position
	public void positionMode() {
		servoHereFlag = false;
		cANTalonElev.ClearIaccum();
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.TalonControlMode.Position);
		cANTalonElev.set(cANTalonElev.getPosition());
		SmartDashboard.putString("Elev Servo Status", "Servo Inactive");
		cANTalonElev.ClearIaccum();

		//


	}

	// Change to closed loop control mode and move "count" ticks 
	public void positionMoveByCount(double count) {
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.TalonControlMode.Position);
		cANTalonElev.set((cANTalonElev.getPosition()+count));
		SmartDashboard.putString("Elev Servo Status", "Servo Inactive");
		cANTalonElev.ClearIaccum();

	}

	public void moveToPosition(double position) {
		servoHereFlag = false;
		cANTalonElev.setProfile(1);
		cANTalonElev.changeControlMode(CANTalon.TalonControlMode.Position);
		cANTalonElev.set(position);
		SmartDashboard.putString("Elev Servo Status", "Servo Inactive");
		cANTalonElev.ClearIaccum();

	}

	// Change to Closed Loop Velocity Mode and
	public void speedMode() {
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.TalonControlMode.Speed);
		axis = Robot.oi.xboxController.getY();
		cANTalonElev.set(axis*12.0); // need to scale the voltage by the joystick values;
		SmartDashboard.putString("Elev Servo Status", "Servo Inactive");
		cANTalonElev.ClearIaccum();

	}

	public void downElev() {
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.TalonControlMode.Speed);
		cANTalonElev.set(DOWN_SPEED);
		SmartDashboard.putString("Elev Servo Status", "Servo Inactive");
		cANTalonElev.ClearIaccum();


	}

	public void upElev() {
		servoHereFlag = false;
		cANTalonElev.ClearIaccum();
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.TalonControlMode.Speed);
		cANTalonElev.set(UP_SPEED);
		SmartDashboard.putString("Elev Servo Status", "Servo Inactive");

	}


	public double getPosition(){
		return cANTalonElev.getPosition();
	}

	public void servoHere(){
		

		if (!Robot.autonomusFlag){ // dont rune servo here in auto. Switching profiles messes up the encoder

			if (!servoHereFlag){ // first time through, so set flag and get the current position
				servoHereFlag = true;
				servoAtThisPosition = cANTalonElev.getPosition();

			}
			if (!elevCurrenLimited()){
				cANTalonElev.ClearIaccum();
				cANTalonElev.setProfile(1);
				cANTalonElev.changeControlMode(CANTalon.TalonControlMode.Position);
				cANTalonElev.set(servoAtThisPosition);
				SmartDashboard.putString("Elev Servo Status", "ServoActive");
			}
			else{
				cANTalonElev.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
				cANTalonElev.set(0);
				SmartDashboard.putString("Elev Servo Status", "CurrentLimited");
			}
		}
	}

	public Boolean isHomed(){
		return (homed);
	}


	public void holdCurrentPosition(){
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.TalonControlMode.Position);
		cANTalonElev.set(cANTalonElev.getPosition());
	}

	public void disable_ElevMotor(){
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
		cANTalonElev.set(0);
		SmartDashboard.putString("Elev Servo Status", "Servo Inactive");

	}

	public Boolean elevCurrenLimited(){ 
		return(cANTalonElev.getOutputCurrent() > MAX_ELEV_CURRENT);
	}

	public boolean upLimitReached(){
		return (cANTalonElev.isFwdLimitSwitchClosed());
	}

	public boolean downLimitReached(){
		return (cANTalonElev.isRevLimitSwitchClosed());
	}

	public void zeroElevator(){
		cANTalonElev.setPosition(0);
	}

	public void homeElevator(){

	}

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		//setDefaultCommand(new MySpecialCommand());
		setDefaultCommand(new ElevatorCommand());

	}

	public int getPositionError(){
		return (cANTalonElev.getClosedLoopError());
	}
	public void showCanTalonStatus() {

		double currentAmps = cANTalonElev.getOutputCurrent();
		double outputV = cANTalonElev.getOutputVoltage();
		double busV = cANTalonElev.getBusVoltage();
		double quadEncoderPos = cANTalonElev.getEncPosition();
		double quadEncoderVelocity = cANTalonElev.getEncVelocity();
		double selectedSensorPos = cANTalonElev.getPosition();
		double selectedSensorSpeed = cANTalonElev.getSpeed();
		double Iaccum = cANTalonElev.GetIaccum();
		double encoderErr = cANTalonElev.getClosedLoopError();
		boolean revLimitSwitch = cANTalonElev.isRevLimitSwitchClosed();
		boolean fwdLimitSwitch = cANTalonElev.isFwdLimitSwitchClosed();
		double commandedPosition = cANTalonElev.getSetpoint();



		SmartDashboard.putNumber("Elev Current", currentAmps);
		SmartDashboard.putNumber("Elev Output Voltage", outputV);
		SmartDashboard.putNumber("Elev Bus Voltage", busV);
		SmartDashboard.putNumber("Elev Encoder Position", quadEncoderPos);
		SmartDashboard.putNumber("Elev Encoder Velocity", quadEncoderVelocity);
		SmartDashboard.putNumber("Elev Position", selectedSensorPos);
		SmartDashboard.putNumber("Elev Speed", selectedSensorSpeed);
		SmartDashboard.putNumber("ELev I Accumulation", Iaccum);
		SmartDashboard.putNumber("Elev Closed Loop Err", encoderErr);
		SmartDashboard.putBoolean("Elev ServoHere Flag", servoHereFlag);
		SmartDashboard.putBoolean("Down Limit Switch", revLimitSwitch);
		SmartDashboard.putBoolean("UP Limit Switch", fwdLimitSwitch);
		SmartDashboard.putBoolean("UP Limit Switch", fwdLimitSwitch);
		SmartDashboard.putBoolean("Elevator Homed", homed);
		SmartDashboard.putNumber("Commanded Position", commandedPosition);





	}

}


