// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5571.RobotFinal.commands;

import edu.wpi.first.wpilibj.command.Command;





import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5571.RobotFinal.Robot;
import org.usfirst.frc5571.RobotFinal.RobotMap;
import org.usfirst.frc5571.RobotFinal.subsystems.Clamp;

/**
 *
 */
public class  ClampCommand extends Command {
	boolean position_held;
	private Clamp clampController = Robot.clamp;
    public ClampCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.clamp);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
		clampController.initCanPID();
		//clampController.initClampLimits();
		SmartDashboard.putString("Clamp MODE:", "Initialized");
		position_held = false;
		clampController.showCanTalonStatus();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
		
		if (Robot.oi.Y_Button) { // close clamp with current limited protection
			// axis = Robot.oi.xboxController.getY();
			// RobotMap.testCAN_MotorCANTalon1.set(axis);
			// clampController.positionMode();
			// SmartDashboard.putString("MODE:", "Position");
			// clampController.showCanTalonStatus();
			// Close Clamp
			//RobotMap.clampLight.set(true);
			if (!clampController.clampCuurenLimited()) {
				clampController.closeClamp();
				SmartDashboard.putString("Clamp MODE:", "Closing");
			} else {
				clampController.servoHere();
				SmartDashboard.putString("Clamp MODE:", "CLOSE CURRENT LIMIT EXCEEDED");
			}
		}

		else if (Robot.oi.X_Button) { // open clamp with current limited
										// protection
			// open Clamp
			if (!clampController.clampCuurenLimited()) {
				clampController.openClamp();
				SmartDashboard.putString("Clamp MODE:", "Opening");
				;
			} else { // current limit exceeded

				clampController.servoHere();
				SmartDashboard.putString("Clamp MODE:", "OPEN CURRENT LIMIT EXCEEDED");
			}

		}
//FOR TUNING ONLY DISCONNECT LINKAGE BEFORE USING
		else if (Robot.oi.A_Button) {
			//clampController.positionMoveByCount(1000);
			//SmartDashboard.putString("MODE:", "B - Move+1000");
			clampController.clampLight_test();

		}

		//FOR TUNING ONLY DISCONNECT LINKAGE BEFORE USING
		//		else if (Robot.oi.B_Button){ 
//			clampController.positionMoveByCount(-1000);
//			SmartDashboard.putString("MODE:", "B - Move-1000");
//		}

		else {
			clampController.servoHere();
			//RobotMap.clampLight.set(false);
		}
		// Display status on every execute call
		clampController.showCanTalonStatus();
		clampController.clampLight_test();
		
   }


    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	//clampController.showCanTalonStatus();
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	
    }
}
