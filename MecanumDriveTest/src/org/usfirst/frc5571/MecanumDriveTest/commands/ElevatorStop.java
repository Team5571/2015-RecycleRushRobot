// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5571.MecanumDriveTest.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5571.MecanumDriveTest.Robot;

/**
 *
 */
public class  ElevatorStop extends Command {
	boolean position_held;
    public ElevatorStop() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elevator);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
		Robot.elevator.initCanPID();
		SmartDashboard.putString("MODE:", "Initialized");
		Robot.elevator.showCanTalonStatus();
		position_held = false;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (Robot.oi.X_Button){ // close clamp with current limited protection
			// Close Clamp
			position_held = false;
		  if (!Robot.elevator.clampCuurenLimited()){
			Robot.elevator.elevatorDown();
				SmartDashboard.putString("MODE:", "Down");
			}
			else{ // current limit exceeded
				if (!position_held) {
					Robot.elevator.holdCurrentPosition();
					SmartDashboard.putString("MODE:", "X - CLOSE CURRENT LIMIT EXCEEDED");
					position_held = true;
				}
				Robot.elevator.servoHere();
			}
		}
		else if  (Robot.oi.Y_Button){ // open clamp with current limited protection
				// open Clamp
			position_held = false;
				if (!Robot.elevator.clampCuurenLimited()){
					Robot.elevator.elevatorUp();
					SmartDashboard.putString("MODE:", "Up");;
				}
				else{ // current limit exceeded
					if (!position_held) {
						Robot.elevator.holdCurrentPosition();
						SmartDashboard.putString("MODE:", "Y - OPEN CURRENT LIMIT EXCEEDED");
						position_held = true;
					}
					Robot.elevator.servoHere();
				}
			}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	Robot.elevator.showCanTalonStatus();
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.elevator.showCanTalonStatus();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.elevator.showCanTalonStatus();
    }
}
