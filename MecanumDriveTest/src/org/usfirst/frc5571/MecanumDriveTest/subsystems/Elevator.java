// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5571.MecanumDriveTest.subsystems;

import org.usfirst.frc5571.MecanumDriveTest.commands.ElevatorStop;
import org.usfirst.frc5571.MecanumDriveTest.commands.ElevatorUp;
import org.usfirst.frc5571.MecanumDriveTest.commands.ElevatorDown;
import org.usfirst.frc5571.MecanumDriveTest.Robot;
import org.usfirst.frc5571.MecanumDriveTest.RobotMap;
import org.usfirst.frc5571.MecanumDriveTest.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Elevator extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANTalon cANTalonElev = RobotMap.evlevatorCANTalonElev;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	double axis;
	static double MAX_CLAMP_CURRENT = 3.0;  // limit current to 3A  motor is rated at 36.91W
	static double CLOSE_SPEED = 320;  // position change per 10 ms
	static double OPEN_SPEED = -320;  // position change per 10 ms
	double p;
	double i;
	double d;
	double f;
	int izone;
	double ramprate;  // this should leave the ramp rate uncapped.
	int profile;
	boolean servoHereFlag;
	double servoAtThisPosition;



	public void initCanPID() {

		// Set PID values for Velocity and Position Mode here in profile 0 for elevator
		p = 5;
		i = 0.0002;
		d = .08;
		f = 0;
		izone = 0;
		ramprate = 0;  // this should leave the ramp rate uncapped.
		profile = 0;
		cANTalonElev.setPID(p, i, d, f, izone, ramprate, profile);

		// Set PID values for Servo In Place Posisiotn Mode here in profile 1 for elevator
		p = 5;
		i = 0.0002;
		d = .08;
		f = 0;
		izone = 0;
		ramprate = 0;  // this should leave the ramp rate uncapped.
		profile = 1;
		cANTalonElev.setPID(p, i, d, f, izone, ramprate, profile);

		// Specify Quadrature Encoder
		cANTalonElev.setFeedbackDevice(CANTalon.FeedbackDevice.QuadEncoder);
		cANTalonElev.reverseSensor(false);
		//Reverse = true for gripper motor
		//Reverse = false for elevator

		// Initially set to run Open Loop Mode on joystick Y command. 
		//		cANTalonElev.changeControlMode(CANTalon.ControlMode.Voltage);
		//		axis = Robot.oi.xboxController.getY();
		//		cANTalonElev.set(axis); //This will not work because this is only initialized at the start.
	}

	// Change to closed loop control mode and hold the current position
	public void positionMode() {
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.ControlMode.Position);
		cANTalonElev.set(cANTalonElev.getPosition());
		SmartDashboard.putString("Servo Status", "Servo Inactive");
	}

	// Change to closed loop control mode and move "count" ticks 
	public void positionMoveByCount(double count) {
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.ControlMode.Position);
		cANTalonElev.set((cANTalonElev.getPosition()+count));
		SmartDashboard.putString("Servo Status", "Servo Inactive");

	}

	// Change to Closed Loop Velocity Mode and
	public void speedMode() {
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.ControlMode.Speed);
		axis = Robot.oi.xboxController.getY();
		cANTalonElev.set(axis*12.0); // need to scale the voltage by the joystick values;
		SmartDashboard.putString("Servo Status", "Servo Inactive");

	}

	public void elevatorUp() {
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.ControlMode.Speed);
		cANTalonElev.set(CLOSE_SPEED);
		SmartDashboard.putString("Servo Status", "Servo Inactive");

	}

	public void elevatorDown() {
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.ControlMode.Speed);
		cANTalonElev.set(OPEN_SPEED);
		SmartDashboard.putString("Servo Status", "Servo Inactive");

	}

	public void servoHere(){
		if (!servoHereFlag){ // first time through, so set flag and get the current position
			servoHereFlag = true;
			servoAtThisPosition = cANTalonElev.getPosition()+16;
			cANTalonElev.setProfile(1);

		}
		if (!clampCuurenLimited()){
			cANTalonElev.changeControlMode(CANTalon.ControlMode.Position);
			cANTalonElev.set(servoAtThisPosition);
			SmartDashboard.putString("Servo Status", "ServoActive");
		}
		else{
			cANTalonElev.changeControlMode(CANTalon.ControlMode.PercentVbus);
			cANTalonElev.set(0);
			SmartDashboard.putString("Servo Status", "CurrentLimited");
		}
	}

	public void holdCurrentPosition(){
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.ControlMode.Position);
		cANTalonElev.set(cANTalonElev.getPosition());
	}

	public void disable_ClampMotor(){
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.ControlMode.PercentVbus);
		cANTalonElev.set(0);
		SmartDashboard.putString("Servo Status", "Servo Inactive");
	}

	public void voltageMode() {
		servoHereFlag = false;
		cANTalonElev.setProfile(0);
		cANTalonElev.changeControlMode(CANTalon.ControlMode.Voltage);
		axis = Robot.oi.xboxController.getY();
		cANTalonElev.set(axis);
		SmartDashboard.putString("Servo Status", "Servo Inactive");
	}
	
	public Boolean clampCuurenLimited(){ 
		return(cANTalonElev.getOutputCurrent() > MAX_CLAMP_CURRENT);
	}

//	public void goForward() {
//		servoHereFlag = false;
//		cANTalonElev.setProfile(0);
//		SmartDashboard.putString("Motor Command", "Forward");
//		cANTalonElev.set(0.1 * (Robot.oi.yAxis));
//		SmartDashboard.putNumber("Motor Current", cANTalonElev.getOutputCurrent());
//		SmartDashboard.putString("Servo Status", "Servo Inactive");
//	}

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		setDefaultCommand(new ElevatorStop());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void showCanTalonStatus() {

		double currentAmps = cANTalonElev.getOutputCurrent();
		double outputV = cANTalonElev.getOutputVoltage();
		double busV = cANTalonElev.getBusVoltage();
		double quadEncoderPos = cANTalonElev.getEncPosition();
		double quadEncoderVelocity = cANTalonElev.getEncVelocity();
		double selectedSensorPos = cANTalonElev.getPosition();
		double selectedSensorSpeed = cANTalonElev.getSpeed();
		int closeLoopErr = cANTalonElev.getClosedLoopError();

		//Timer.delay(.5); //Why do you have a delay on the outputs to the smart dashbaord?
		{
			SmartDashboard.putNumber("Motor Current", currentAmps);
			SmartDashboard.putNumber("cANTalonElev Output Voltage", outputV);
			SmartDashboard.putNumber("cANTalonElevBus Voltage", busV);
			SmartDashboard.putNumber("Encoder Position", quadEncoderPos);
			SmartDashboard.putNumber("Encoder Velocity", quadEncoderVelocity);
			SmartDashboard.putNumber("Position", selectedSensorPos);
			SmartDashboard.putNumber("Speed", selectedSensorSpeed);
			SmartDashboard.putNumber("Position Error", closeLoopErr);
			SmartDashboard.putBoolean("ServoHere Flag", servoHereFlag);


		}

	}

}

